js高阶函数map&reduce:
1)map:一个函数f(x)=x2，要把这个函数作用在一个数组[1, 2, 3, 4, 5, 6, 7, 8, 9]上，就可以用map实现如下：
     由于map()方法定义在JavaScript的Array中，我们调用Array的map()方法，传入我们自己的函数，就得到了一个新的Array作为结果：

'use strict';

function pow(x) {
    return x * x;
}
var arr = [1, 2, 3, 4, 5, 6, 7, 8, 9];
var results = arr.map(pow); // [1, 4, 9, 16, 25, 36, 49, 64, 81]
console.log(results);
注意：map()传入的参数是pow，即函数对象本身。
2)reduce:Array的reduce()把一个函数作用在这个Array的[x1, x2, x3...]上，这个函数必须接收两个参数，reduce()把结果继续和序列的下一个元素做累积计算，其效果就是：

[x1, x2, x3, x4].reduce(f) = f(f(f(x1, x2), x3), x4)

比如求和实现：
var arr = [1, 3, 5, 7, 9];
arr.reduce(function (x, y) {
    return x + y;
}); // 25

1，2)相结合，想办法把一个字符串13579先变成Array――[1, 3, 5, 7, 9]，再利用reduce()就可以写出一个把字符串转换为Number的函数。
'use strict';

function string2int(s) {
  var arr = s.split("13579");
  arr = arr.map(function(x){
    return x *1;
  });
  var result = arr.reduce(function(x,y){
     return x *10 + y;
  });
  return result;
}


例
请把用户输入的不规范的英文名字，变为首字母大写，其他小写的规范名字。输入：['adam', 'LISA', 'barT']，输出：['Adam', 'Lisa', 'Bart']。

'use strict';

function normalize(arr) {
  return arr.map(function(x){
            return x.toUpperCase().substring(0,1) + x.toLowerCase().substring(1);
        });
}
